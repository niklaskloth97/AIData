// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs

Table projects {
  id integer [primary key]
  created_at timestamp
  name varchar
  owner integer
}

Table project_members {
  project_id integer 
  user_id integer
  created_at timestamp
}

Table users {
  id integer [primary key]
  username varchar
  firstName varchar
  lastName varchar
  email varchar
  passwordHash varchar
  created_at timestamp
}

// Table posts {
//   id integer [primary key]
//   title varchar
//   body text [note: 'Content of the post']
//   user_id integer
//   status varchar
//   created_at timestamp
// }

Table adapters{
  id integer [primary key]
  name varchar
  description varchar
}

Table misc {
  id integer [primary key]
}

Table dbConnections {
  id integer [primary key]
  displayName varchar
  databaseType varchar
  username varchar
  password varchar
  hostname varchar
  port integer
  dbName varchar
  projects_id integer
}

Table projectFiles {
  id integer [primary key]
  filename varchar
  projects_id integer
  // Needs update -> see during implementation
}

Table projectTables {
  id integer [primary key]
  nativeTableName varchar
  primaryKeyDetected boolean
  description varchar
  descriptionAutoGenerated boolean
  columnCount integer // computed
  database_id integer
  projects_id integer
}

Table projectTablesColumns {
  id integer [primary key]
  nativeColumnName varchar
  isPrimaryKey boolean
  foreignKeyFor varchar //could also be a foreign key to some other table
  dataType varchar
  description varchar
  descriptionsAutoGenerated boolean
  projectTables_id integer
  projects_id integer
}

Table projectProcess {
  id integer [primary key]
  name varchar
  description varchar
  project_id integer
}

Table projectProcessSteps {
  id integer [primary key]
  name varchar
  description varchar
  projectProcess_id integer
  // Do order via linked list?
}

Table adapterProcessSteps {
  id integer [primary key]
  name varchar
  description varchar
  tablesInvolved varchar
  //adapters_id integer -> adapterProcess ref
}

Table adapterBusinessObjects {
  id integer [primary key]
  name varchar
  description varchar
  storage varchar
  changeQuery_SQL varchar
  changeQuery_explanation varchar
  adapterProcessSteps_id integer
}

Ref: adapterBusinessObjects.adapterProcessSteps_id > adapterProcessSteps.id

Ref: projectProcess.project_id > projects.id

Ref: projectTablesColumns.projectTables_id > projectTables.id

Ref: projectTablesColumns.projectTables_id > projects.id

Ref: projectTables.database_id > dbConnections.id

Ref: projectTables.projects_id > projects.id

Ref: projectFiles.projects_id > projects.id

Ref: dbConnections.projects_id > projects.id

// Ref: posts.user_id > users.id // many-to-one

Ref: projects.owner > users.id

Ref: users.id < project_members.user_id

Ref: projects.id < project_members.project_id
