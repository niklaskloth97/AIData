from sqlalchemy import Column, Integer, String, Boolean, ForeignKey
from sqlalchemy.orm import relationship
from pydantic import BaseModel
from typing import List, Optional
from restapi.models.ProjectTableColumn import ProjectTableColumnSchema
from restapi.lib.db import Base

class ProjectTable(Base):
    __tablename__ = "projectTables"

    id = Column(Integer, primary_key=True)
    nativeTableName = Column(String, unique=True)
    primaryKeyDetected = Column(Boolean)
    description = Column(String)
    descriptionAutoGenerated = Column(Boolean)
    columnCount = Column(Integer)
    database_id = Column(Integer)
    projects_id = Column(Integer)
    table_name = Column(String)
    table_nameAutoGenerated = Column(Boolean)

    # Define a relationship to ProjectTableColumn
    columns = relationship(
        "ProjectTableColumn",
        back_populates="table",
        cascade="all, delete-orphan",
        lazy="joined"  # Eagerly load columns when querying ProjectTable
    )

class ProjectTableSchema(BaseModel):
    id: int
    nativeTableName: str
    primaryKeyDetected: bool
    description: str
    descriptionAutoGenerated: bool
    columnCount: int
    database_id: int
    projects_id: int
    table_name: str
    table_nameAutoGenerated: bool
    columns: List[ProjectTableColumnSchema]  # Include related columns

    class Config:
        from_attributes = True
