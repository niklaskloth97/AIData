from sqlalchemy.orm import Session
from sqlalchemy import inspect, create_engine
from models import ProjectTable, ProjectTableColumn
from langchain_openai import ChatOpenAI
from dotenv import load_dotenv
import os

# Load environment variables
load_dotenv()

# PostgreSQL connection
POSTGRES_URI = "postgresql://aidatahilti_owner:YDkg5rC6jpdL@ep-flat-leaf-a20i5gog.eu-central-1.aws.neon.tech/aidatahilti?sslmode=require"
pg_engine = create_engine(POSTGRES_URI)

# SQLite connection
SQLITE_URI = "sqlite:///./project_metadata.db"
sqlite_engine = create_engine(SQLITE_URI)

# Initialize OpenAI LLM
llm = ChatOpenAI(model="gpt-4o", openai_api_key=os.getenv("OPENAI_API_KEY"))

def populate_metadata():
    # Inspect PostgreSQL schema
    inspector = inspect(pg_engine)
    table_names = inspector.get_table_names()

    with Session(sqlite_engine) as session:
        for table_name in table_names:
            # Skip if table is already in SQLite
            if session.query(ProjectTable).filter_by(nativeTableName=table_name).first():
                continue

            # Fetch table metadata
            columns = inspector.get_columns(table_name)
            table_description = llm.invoke(f"Provide a description for the table '{table_name}'.")
            table_speaking_name = llm.invoke(f"Provide a descriptive name for the table '{table_name}'. Make sure its only 1 word.")
            # Insert table metadata
            project_table = ProjectTable(
                nativeTableName=table_name,
                primaryKeyDetected=any(col.get("primary_key", False) for col in columns),
                description=table_description.content,
                descriptionAutoGenerated=True,
                speakingName=table_speaking_name.content,
                columnCount=len(columns),
                database_id=1,  # Replace with actual database ID
                projects_id=1  # Replace with actual project ID
                
            )
            session.add(project_table)
            session.flush()  # To get the table ID for foreign key references

            # Insert column metadata
            for col in columns:
                column_description = llm.invoke(f"Describe the column '{col['name']}' in table '{table_name}'. In Maximal 3 sentences. Context of SAP is given just tell what the table stores.")
                
                column_speaking_name = llm.invoke(f"Provide a descriptive name for the column '{col['name']}' in table '{table_name}'. Make sure its only 1 word.")
                project_table_column = ProjectTableColumn(
                    nativeColumnName=col["name"],
                    isPrimaryKey=col.get("primary_key", False),
                    foreignKeyFor=None,
                    dataType=str(col["type"]),
                    description=column_description.content,
                    speakingName=column_speaking_name.content,
                    descriptionsAutoGenerated=True,
                    projectTables_id=project_table.id,
                    projects_id=1  # Replace with actual project ID
                )
                session.add(project_table_column)
            print(f"Metadata populated for table '{table_name}'")

        # Commit changes
        session.commit()

if __name__ == "__main__":
    populate_metadata()
    print("Metadata populated successfully!")
