from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from restapi.models.ProjectTable import ProjectTable, ProjectTableSchema
from restapi.models.ProjectTableColumn import ProjectTableColumn, ProjectTableColumnSchema
from typing import List
from restapi.lib.db import get_db

# Router for ProjectTableColumn
column_router = APIRouter(
    prefix="/project-table-columns",
)

@column_router.get("/", response_model=List[ProjectTableColumnSchema])
def get_project_table_columns(db: Session = Depends(get_db)):
    project_table_columns = db.query(ProjectTableColumn).all()
    if not project_table_columns:
        raise HTTPException(status_code=404, detail="No project table columns found")
    return project_table_columns


@column_router.post("/", response_model=ProjectTableColumnSchema)
def create_project_table_column(project_table_column: ProjectTableColumnSchema, db: Session = Depends(get_db)):
    new_project_table_column = ProjectTableColumn(
        nativeColumnName=project_table_column.nativeColumnName,
        isPrimaryKey=project_table_column.isPrimaryKey,
        foreignKeyFor=project_table_column.foreignKeyFor,
        dataType=project_table_column.dataType,
        description=project_table_column.description,
        column_name=project_table_column.column_name,
        column_nameAutoGenerated=project_table_column.column_nameAutoGenerated,
        descriptionsAutoGenerated=project_table_column.descriptionsAutoGenerated,
        projectTables_id=project_table_column.projectTables_id,
        projects_id=project_table_column.projects_id,
    )
    db.add(new_project_table_column)
    db.commit()
    db.refresh(new_project_table_column)
    return new_project_table_column


@column_router.delete("/", response_model=dict)
def delete_all_project_table_columns(db: Session = Depends(get_db)):
    db.query(ProjectTableColumn).delete()
    db.commit()
    return {"message": "All project table columns deleted successfully"}


@column_router.delete("/{column_id}", response_model=dict)
def delete_project_table_column(column_id: int, db: Session = Depends(get_db)):
    project_table_column = db.query(ProjectTableColumn).filter_by(id=column_id).first()
    if not project_table_column:
        raise HTTPException(status_code=404, detail="Project table column not found")
    db.delete(project_table_column)
    db.commit()
    return {"message": "Project table column deleted successfully"}
